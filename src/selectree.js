// Generated by CoffeeScript 1.10.0
(function() {
  var ParseCSS, ParseXPath, SelecTree, SelectStream, ToTreeStream, stream,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  stream = require('stream');

  SelecTree = (function() {
    SelecTree.RequiredParams = ['name', 'children', 'attributes', 'content'];

    SelecTree.ValidateArgs = function(opts) {
      if (opts == null) {
        throw new Error("no traversal options given!");
      } else if ((opts.json == null) && !this.constructor.RequiredParams.every((function(_this) {
        return function(p) {
          return _this.opts[p] != null;
        };
      })(this))) {
        throw new Error("not all traversal options [" + (this.constructor.RequiredParams.join(',')) + "] given!");
      } else if ((opts.json != null) && (this.opts.name == null)) {
        throw new Error("no 'name' parameter given for json object!");
      }
    };

    SelecTree.CloneOpts = function(opts) {
      var i, len, newOpts, param, ref;
      newOpts = {};
      ref = this.constructor.RequiredParams;
      for (i = 0, len = ref.length; i < len; i++) {
        param = ref[i];
        newOpts[param] = opts[param];
      }
      return newOpts;
    };

    SelecTree.EachCaseOfOpts = function(obj, opts, arrFun, objFun, jsonFun, xmlFun) {
      if (opts.json && (opts.children == null)) {
        if (obj instanceof Array) {
          return arrFun(obj, opts);
        } else if (obj instanceof Object) {
          return objFun(obj, opts);
        } else {
          return jsonFun(obj, opts);
        }
      } else {
        return xmlFun(obj, opts);
      }
    };

    function SelecTree(obj1, opts1) {
      this.obj = obj1;
      this.opts = opts1;
      this.constructor.ValidateArgs(this.opts);
    }

    SelecTree.prototype.name = function() {
      if (this.opts.json) {
        return this.opts.name;
      } else {
        return this.opts.name(this.obj);
      }
    };

    SelecTree.GetArrayChildren = function(obj, opts) {
      return obj.map(function(o, ind) {
        var newOpts;
        newOpts = SelecTree.CloneOpts(opts);
        newOpts.name = ind.toString();
        return new SelecTree(o, newOpts);
      });
    };

    SelecTree.GetObjectChildren = function(obj, opts) {
      var k, newOpts, results, v;
      results = [];
      for (k in obj) {
        v = obj[k];
        newOpts = SelecTree.CloneOpts(opts);
        newOpts.name = k;
        results.push(new SelecTree(v, newOpts));
      }
      return results;
    };

    SelecTree.GetEmptyChild = function() {
      return [];
    };

    SelecTree.GetXmlChildren = function(obj, opts) {
      return opts.children(obj).map((function(_this) {
        return function(o) {
          return new SelecTree(o, opts);
        };
      })(this));
    };

    SelecTree.prototype.children = function() {
      return this.constructor.EachCaseOfOpts(this.obj, this.opts, this.constructor.GetArrayChildren, this.constructor.GetObjectChildren, this.constructor.GetEmptyChild, this.constructor.GetXmlChildren);
    };

    SelecTree.GetEmptyContent = function() {
      return '';
    };

    SelecTree.prototype.content = function() {
      return this.constructor.EachCaseOfOpts(this.obj, this.opts, this.constructor.GetEmptyContent, this.constructor.GetEmptyContent, ((function(_this) {
        return function() {
          return _this.obj;
        };
      })(this)), this.opts.content);
    };

    SelecTree.prototype.attributes = function() {
      var base;
      return typeof (base = this.opts).attributes === "function" ? base.attributes(this.obj) : void 0;
    };

    SelecTree.prototype.css = function(sel) {
      return new SelectStream(this, sel, {
        css: true
      });
    };

    SelecTree.prototype.xpath = function(sel) {
      return new SelectStream(this, sel, {
        xpath: true
      });
    };

    return SelecTree;

  })();

  ParseCSS = function(obj, sel) {};

  ParseXPath = function(obj, sel) {};

  SelectStream = (function(superClass) {
    extend(SelectStream, superClass);

    function SelectStream(treeObj, selector, opts) {
      if (opts == null) {
        opts = {};
      }
      opts.objectMode = true;
      stream.Readable.call(this, opts);
      this.traverser = (function() {
        if (opts.css) {
          return ParseCSS(treeObj, sel);
        } else if (opts.xpath) {
          return ParseXPath(treeObj, sel);
        } else {
          throw new Error("no selector type given!");
        }
      })();
    }

    SelectStream.prototype.traverse = function() {
      var next;
      next = this.traverser.getNext();
      if ((next != null) && this.push(next)) {
        return process.nextTick((function(_this) {
          return function() {
            return _this.traverse();
          };
        })(this));
      }
    };

    SelectStream.prototype._read = function() {
      return process.nextTick((function(_this) {
        return function() {
          return _this.traverse();
        };
      })(this));
    };

    return SelectStream;

  })(stream.Readable);

  ToTreeStream = (function(superClass) {
    extend(ToTreeStream, superClass);

    function ToTreeStream(opts) {
      if (opts == null) {
        opts = {};
      }
    }

    return ToTreeStream;

  })(stream.Writable);

}).call(this);
